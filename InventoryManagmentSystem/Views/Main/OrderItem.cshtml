
@{
    ViewBag.Title = "OrderItem";
}

<style>
    .modal-body {
        margin-top: 1rem;
    }

    #claer {
        background-color: blueviolet;
    }
</style>

<div class="row">
    <div class="col-md-12">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6 p-0 flex justify-content-lg-start justify-content-center">
                        <h2 class="ml-lg-2">Manage Order</h2>
                    </div>
                    <div class="col-sm-6 p-0 flex justify-content-lg-end justify-content-center">
                    </div>
                </div>
            </div>
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                    </div>
                    <div class="modal-body">
                        <form id="editEmployeeForm">
                            <div class="form-group">
                                <label>Product</label>
                                <select class="form-select form-control" id="BrandList" name="BrandList" required>
                                </select>
                            </div>
                            <div class="form-group">
                                <label>Product</label>
                                <select class="form-select form-control" id="ProductList" name="ProductList" required>
                                </select>
                            </div>
                            <div class="form-group">
                                <label>Product Variant</label>
                                <select class="form-select form-control" id="ProductVariantList" name="ProductVariantList" required>
                                </select>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="Quantity">Quantity</label>
                                        <input type="number" class="form-control" id="Quantity" name="Quantity" required disabled>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="Price">Price</label>
                                        <input type="number" class="form-control" id="Price" name="Price" required disabled>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label>Order Quantity</label>
                                <input type="number" class="form-control" id="OrderQuantity" name="OrderQuantity" required>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer" style="margin-bottom:1rem;">

                        <button type="button" class="btn btn-success" id="saveEditButton">Add</button>
                    </div>
                </div>
            </div>

        </div>
    </div>

    <div class="col-md-12">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6 p-0 flex justify-content-lg-start justify-content-center">
                        <h2 class="ml-lg-2">Manage Order List</h2>
                    </div>
                    <div class="col-sm-6 p-0 flex justify-content-lg-end justify-content-center">
                        <a href="#addEmployeeModal" class="btn btn-success" data-toggle="modal">
                            <i class="material-icons">&#xE147;</i>
                            <span>Add New Supplier</span>
                        </a>
                        <a class="btn btn-success" id="claer" data-toggle="modal">
                            <i class="material-icons">cached</i>
                            <span>Clear</span>
                        </a>

                    </div>
                </div>
            </div>
            <table id="userDetailsTable" class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>No Items</th>
                        <th>Brand Id</th>
                        <th>Product Id</th>
                        <th>Product Variant Id</th>
                        <th>Price</th>
                        <th>Order Quantity</th>
                        <th>Remove</th>

                    </tr>
                </thead>
                <tbody id="tableBody">
                    <tr>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!----add-modal start--------->
    <div class="modal fade" tabindex="-1" id="addEmployeeModal" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Total Amount</label>
                        <input type="number" class="form-control" id="txtTotal" name="txtTotal" required disabled>
                    </div>
                    <div class="form-group">
                        <label>Total Quantity</label>
                        <input type="number" class="form-control" id="txtTotalQuantity" name="txtTotalQuantity" required disabled>
                    </div>
                    <div class="form-group">
                        <label>Customer Name</label>
                        <select class="form-select form-control" id="CustomerList" name="CustomerList" required>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Payment Method</label>
                        <select class="form-select form-control" id="PaymentMethodList" name="PaymentMethodList" required>
                        </select>
                    </div>


                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success">Add</button>
                </div>
            </div>
        </div>
    </div>
    <!--Add model end-->
</div>

<script>
    $.ajax({
        pe: "GET",
        url: "/Product/GetBrandDetails",
        dataType: "json",
        success: function (data) {
            if (data && data.length > 0) {
                $("#BrandList").empty();
                // Add new options from the data
                $.each(data, function (index, item) {
                    $("#BrandList").append($('<option>', {
                        value: item.BrandId,
                        text: item.BrandName
                    }));
                });
            }
            else {
                console.log("Data is Empty")
            }

        },
        error: function () {
            alert("Failed to load brands.");
        },
    });

    $.ajax({
        url: "/Customer/GetCustomerIdAndName",
        type: "GET",
        dataType: "json",
        success: function (data) {
            $("#CustomerList").empty();
            $.each(data, function (index, customerDetails) {
                $("#CustomerList").append(
                    $("<option>")
                        .text(customerDetails.CustomerName)
                        .val(customerDetails.CustomerId)
                );
            });
        },
        error: function () {
            alert("Error occurred while fetching Customer Details.");
        }
    });

    $.ajax({
        url: "/OrderItem/GetPaymentMethod",
        type: "GET",
        dataType: "json",
        success: function (data) {
            $("#PaymentMethodList").empty();
            $.each(data, function (index, Data) {
                $("#PaymentMethodList").append(
                    $("<option>")
                        .text(Data.PaymentMethod)
                        .val(Data.PaymentMethodId)
                );
            });
        },
        error: function () {
            alert("Error occurred while fetching PaymentMethod Details.");
        }
    });


    $(document).ready(function () {
        $("#BrandList").change(function () {
            var selectedBrandId = $(this).val();
            if (selectedBrandId !== "") {
                $.ajax({
                    url: "/Product/ProductOrderByBrand?brandId=" + selectedBrandId,
                    type: "GET",
                    dataType: "json",
                    success: function (data) {
                        $("#ProductList").empty();
                        $.each(data, function (index, product) {
                            $("#ProductList").append(
                                $("<option>")
                                    .text(product.ProductName)
                                    .val(product.ProductId)
                            );
                        });
                    },
                    error: function () {
                        alert("Error occurred while fetching products.");
                    }
                });
            } else {
                // Clear the ProductList dropdown when no brand is selected
                $("#ProductList").empty();
                $("#ProductVariantList").empty();
                $("#Quantity").val("");
                $("#Price").val("");
            }
        });

        $("#ProductList").change(function () {
            var selectedProductId = $(this).val();
            if (selectedProductId !== "") {
                $.ajax({
                    url: "/Product/ProductVariantOrderByBrand?productId=" + selectedProductId,
                    type: "GET",
                    dataType: "json",
                    success: function (data) {
                        $("#ProductVariantList").empty();
                        $.each(data, function (index, product) {
                            $("#ProductVariantList").append(
                                $("<option>")
                                    .text(product.Description)
                                    .val(product.ProductVariantId)
                            );
                        });
                    },
                    error: function () {
                        alert("Error occurred while fetching products.");
                    }
                });
            } else {
                // Clear the ProductList dropdown when no brand is selected
                $("#ProductList").empty();
                $("#ProductVariantList").empty();
                $("#Quantity").val("");
                $("#Price").val("");
            }
        });

        $("#ProductVariantList").change(function () {
            var selectedProductId = $(this).val();
            if (selectedProductId !== "") {
                $.ajax({
                    url: "/Product/ProductVariant?productId=" + selectedProductId,
                    type: "GET",
                    dataType: "json",
                    success: function (data) {
                        if (data) {
                            $("#Quantity").val(data.Quantity);
                            $("#Price").val(data.Price);
                        } else {
                            // Handle the case where data is empty or not as expected
                            alert("Data not available for the selected product variant.");
                        }
                    },
                    error: function () {
                        alert("Error occurred while fetching products.");
                    }
                });
            } else {
                $("#Quantity").val("");
                $("#Price").val("");
            }
        });

        $("#addEmployeeModal").on('click', '.btn-success', function () {
            var CustomerId = $("#CustomerList").val();
            var jsonString = localStorage.getItem('formData');
            var data = JSON.parse(jsonString);

            sendDataToServer(CustomerId,data);
        });
    });


    // Function to save data to local storage
    function saveDataToLocalStorage(data) {
        localStorage.setItem('formData', JSON.stringify(data));
    }

    // Function to retrieve data from local storage
    function getDataFromLocalStorage() {
        var data = localStorage.getItem('formData');
        return data ? JSON.parse(data) : [];
    }

    // Function to display data in the table
    function displayDataInTable(data) {
        var tableBody = $("#tableBody");
        tableBody.empty(); // Clear existing rows

        // Loop through the data and add rows to the table
        data.forEach(function (item, index) {
            var newRow = $("<tr>");
            newRow.append("<td>" + (index + 1) + "</td>");
            newRow.append("<td>" + item.BrandId + "</td>");
            newRow.append("<td>" + item.ProductId + "</td>");
            newRow.append("<td>" + item.ProductVariantId + "</td>");
            newRow.append("<td>" + item.ItemPrice + "</td>");
            newRow.append("<td>" + item.Quantity + "</td>");

            // Create a remove button and attach a click event handler
            var removeButton = $("<button>")
                .text("Remove")
                .addClass("btn btn-danger btn-sm")
                .on("click", function () {
                    // Remove the corresponding row from the table and update the data array
                    newRow.remove();
                    data.splice(index, 1);
                    saveDataToLocalStorage(data);
                });
            // Add the remove button to the last column of the row
            var removeCell = $("<td>").append(removeButton);
            newRow.append(removeCell);

            // Append the new row to the table body
            tableBody.append(newRow);

            // Function to update the item count column
            function updateItemCountColumn() {
                var rowCount = tableBody.find("tr").length;
                tableBody.find("tr").each(function (index, row) {
                    $(row).find("td:first").text(index + 1);
                });
            }

            // Update the item count column initially
            updateItemCountColumn();
        });

    }

    // Load data from local storage and display in the table
    var formData = getDataFromLocalStorage();
    displayDataInTable(formData);

    function CustomerOrder(data) {
        var dataList;
        try {

            dataList = data; // Assuming formData is in JSON format
            var orderQuantitySum = calculateSum(dataList, "Quantity");

            // Set the sum in the input field
            var txtTotalQuantity = document.getElementById("txtTotalQuantity");
            if (txtTotalQuantity) {
                txtTotalQuantity.value = orderQuantitySum;
            } else {
                console.error('Element with id "txtTotalQuantity" not found.');
            }

            var totalAmountSum = calculateTotalAmount(dataList);

            // Set the total sum in the input field
            var txtTotal = document.getElementById("txtTotal");
            if (txtTotal) {
                txtTotal.value = totalAmountSum;
            } else {
                console.error('Element with id "txtTotal" not found.');
            }

        } catch (error) {
            console.error('Error parsing formData:', error);
            dataList = [];
        }
    }

    function calculateSum(dataArray, property) {
        var sum = 0;
        for (var i = 0; i < dataArray.length; i++) {
            var item = dataArray[i];
            // Ensure the property exists and is a valid number
            if (item.hasOwnProperty(property) && !isNaN(parseFloat(item[property]))) {
                sum += parseFloat(item[property]);
            }
        }
        return sum;
    }

    function calculateTotalAmount(dataArray) {
        var totalAmountSum = 0;
        for (var i = 0; i < dataArray.length; i++) {
            var item = dataArray[i];
            // Ensure "Quantity" and "Price" properties exist and are valid numbers
            if (item.hasOwnProperty("Quantity") && item.hasOwnProperty("ItemPrice") &&
                !isNaN(parseFloat(item["Quantity"])) && !isNaN(parseFloat(item["ItemPrice"]))) {
                totalAmountSum += parseFloat(item["Quantity"]) * parseFloat(item["ItemPrice"]);
            }
        }
        return totalAmountSum;
    }
    $("#saveEditButton").click(function () {


        // Get the form data
        var brandValue = parseInt($("#BrandList").val(), 10);
        var productValue = parseInt($("#ProductList").val(), 10);
        var productVariantValue = parseInt($("#ProductVariantList").val(), 10);
        var priceValue = parseInt($("#Price").val(), 10);
        var orderQuantityValue = parseInt($("#OrderQuantity").val(), 10);


        if (isNaN(brandValue) || brandValue === "") {
            alert("Brand is required.");
        } else if (isNaN(productValue) || productValue === "") {
            alert("Product is required.");
        } else if (isNaN(productVariantValue) || productVariantValue === "") {
            alert("Product Variant is required.");
     
        } else if (isNaN(priceValue) || priceValue === "") {
            alert("Price is required.");
        } else if (isNaN(orderQuantityValue) || orderQuantityValue === "") {
            alert("Order Quantity is required.");
        } else {
            // Create an object with the form data
            var formItem = {
                BrandId: brandValue,
                ProductId: productValue,
                ProductVariantId: productVariantValue,
                ItemPrice: priceValue,
                Quantity: orderQuantityValue
            };
            // Add the form data to the array
            formData.push(formItem);

            // Save the updated array to local storage
            saveDataToLocalStorage(formData);

            // Display the updated data in the table
            displayDataInTable(formData);

            // Clear the form fields
            $("#BrandList").val('');
            $("#ProductList").val('');
            $("#ProductVariantList").val('');
            $("#Quantity").val('');
            $("#Price").val('');
            $("#OrderQuantity").val('');
        }
    });
    $(".btn-success").click(function () {
        var formData = getDataFromLocalStorage();
        CustomerOrder(formData);
    });

    $('#claer').click(function () {
        removeDataFromLocalStorage();
    });

    function removeDataFromLocalStorage() {
        localStorage.removeItem('formData');
        var formData = getDataFromLocalStorage();
        displayDataInTable(formData);
    }
</script>

